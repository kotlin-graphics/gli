import static org.gradle.internal.os.OperatingSystem.*

plugins {
    id 'maven'
    id 'java'
    id 'java-library'
    id "org.jetbrains.kotlin.jvm" version "1.3.41"
    id "com.github.johnrengelman.shadow" version '5.1.0'
}

// jitpack
group = 'com.github.kotlin-graphics'

ext {
    moduleName = 'com.github.kotlin_graphics.gli'
    kotlin = 'org.jetbrains.kotlin:kotlin'
    kotlin_version = '1.3.70'
    kotlintest_version = '3.4.2'
    glm_version = 'jdk8-SNAPSHOT'
    unsigned_version = 'jdk8-SNAPSHOT'
    kool_version = 'jdk8-SNAPSHOT'
    lwjgl_version = "3.2.3"
    lwjgl_natives = current() == WINDOWS ? "windows" : current() == LINUX ? "linux" : "macos"
}

dependencies {

    implementation "$kotlin-stdlib"

    def kx = "com.github.kotlin-graphics"
    implementation "${kx}.glm:glm:$glm_version"
    implementation "$kx:kool:$kool_version"
    implementation "$kx:kotlin-unsigned:$unsigned_version"

    // https://mvnrepository.com/artifact/com.twelvemonkeys.imageio/imageio-core
    ["", /*"-batik",*/ "-bmp", "-core", "-icns", "-iff", "-jpeg", "-metadata", "-pcx", "-pdf", "-pict", "-pnm",
     "-psd", "-sgi", "-tga", "-thumbsdb", "-tiff",     /*"-reference", "-clippath", "-hdr"*/].each {
        implementation "com.twelvemonkeys.imageio:imageio$it:3.5"
    }
    // https://mvnrepository.com/artifact/org.apache.xmlgraphics/batik-transcoder
    //implementation "org.apache.xmlgraphics:batik-transcoder:1.12"


    ["", "-jemalloc"].each {
        implementation "org.lwjgl:lwjgl$it:$lwjgl_version"
        runtimeOnly "org.lwjgl:lwjgl$it:$lwjgl_version:natives-$lwjgl_natives"
    }

    testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotlintest_version"
    testImplementation "${kx}.glm:glm:$glm_version"
    ["", "-jemalloc", "-opengl"].each {
        testImplementation "org.lwjgl:lwjgl$it:$lwjgl_version"
        testRuntimeOnly "org.lwjgl:lwjgl$it:$lwjgl_version:natives-$lwjgl_natives"
    }
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://jitpack.io' }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
//    archives javadocJar
}

jar {
    inputs.property("moduleName", moduleName)
//    manifest.attributes('Automatic-Module-Name': moduleName)
}

compileKotlin {
    // Enable Kotlin compilation to Java 8 class files with method parameter name metadata
    kotlinOptions {
        jvmTarget = "1.8"
//        javaParameters = true
    }
    // As per https://stackoverflow.com/a/47669720
    // See also https://discuss.kotlinlang.org/t/kotlin-support-for-java-9-module-system/2499/9
    destinationDir = compileJava.destinationDir
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
//        javaParameters = true
    }
}

compileJava {
    dependsOn(':compileKotlin')
}

test {
    useJUnitPlatform()

    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
//        showStandardStreams = true

        // Or we use events method:
        // events 'standard_out', 'standard_error'

        // Or set property events:
        // events = ['standard_out', 'standard_error']

        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}

shadowJar.archiveClassifier = 'all'
